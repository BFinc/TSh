var setups = [];//SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getDataRange().getValues();
var prm = [];
var errorLog ='';

function testSearchFiles() {
  var files = DriveApp.getFolderById('0B2n7QuWDntYRZ2tpLWk2NERjUW8').searchFiles('title contains "{{OK}}" and modifiedDate > "2017-09-14"');
  while (files.hasNext()) {
    var file = files.next();
    Logger.log(file.getName());
  }
}


function getpdfHTML(report) {
  //&emsp
  //  var portrait = false; //report.partrait
  //var ssid = '1RADplvGwaYcY__Kmkd62DxUkeRpycg6gRfpS0ngRQcs';//report.reportId;
  //var sheetid='2042699284';//report.ShIDs[j];
  //var sheetname = 'Blue_1895';//report.ShNames[j];
  //var shtitle = 'MDOT_51400_MVA_07-24-17 to 07-30-17';//report.Title;
  //var folderId = '0B2n7QuWDntYRVWFFRHJOZExGekU';//report.TargetFolder[1];
  //var folderName = '07-24-17 to 07-30-17';//report.TargetFolderName;
  var FolderStr = jet('Time Period: <a href="https://drive.google.com/drive/folders//%s" target="_blank">%s</a>',[report.TargetFolder[1],report.TargetFolderName]);//Rs.reports[0].TargetFolder[1],Rs.reports[0].TargetFolderName);
  var ReportTitleLnk = jet('<a href="https://docs.google.com/spreadsheets/d/%s" target="_blank">%s</a>',[report.reportId,report.Title]);//Rs.reports[0].reportId,Rs.reports[0].reportName,RepExpoUrl);
  var TClnktitle = 'Time Card pdf';
  var PDFLink = '<a href="https://docs.google.com/spreadsheets/export?id=%s&exportFormat=pdf&fitw=true&gridlines=false&portrait=%s%s">%s</a>'; //full report
  var getReportPDFLink = jet(PDFLink,[report.reportId,report.portrait,'','<strong>get full Report pdf</strong>']); //full report
  //var getTCPDFLink = jet(PDFLink,[report.reportId,report.portrait,'&gid='+sheetid,TClnktitle]); //TimeCard pdf
  
  var tabHead = '<table style="padding-left: 20px;height: 26px;" td{padding: 15px;} width="600"><tbody>';
  var tabFoot = '</tbody></table>';
  var HTMLBody =FolderStr+tabHead+jet('<tr><td>%s</td><td>&nbsp;%s</td></tr>%s',[ReportTitleLnk,getReportPDFLink,tabFoot]);
  HTMLBody +=tabHead+'<tr style="text-align: center;"><td>Employee</td><td>PO</td><td>Reported Hours</td><td>Export Link</td></tr>';
  for (var j in report.ShIDs){
    var getTCPDFLink = jet(PDFLink,[report.reportId,report.timesheets[j].portrait,'&gid='+report.ShIDs[j],TClnktitle]); 
//OK    HTMLBody += jet('<tr><td>%s</td><td>&nbsp;%s</td></tr>',[report.ShNames[j],getTCPDFLink]);
    HTMLBody += jet('<tr style="text-align: center;"><td style="text-align: left;">%s</td><td>%s</td><td>%s</td><td>&nbsp;%s</td></tr>',[report.ShNames[j],report.POs[j],report.TotalHours[j],getTCPDFLink]);
  }
  HTMLBody += tabFoot;
  HTMLBody += '<strong>Summary of Total Reported Hours by PO Number:</strong><br>';
  HTMLBody +=tabHead+'<tr style="text-align: center;"><td>PO Number</td><td>Total Hours</td></tr>';
  for (var j in report.TotalHrsByPO){
    HTMLBody += jet('<tr style="text-align: center;"><td>%s</td><td>&nbsp;%s</td></tr>',[report.TotalHrsByPO[j][0],report.TotalHrsByPO[j][1].toFixed(2)]);
  }
  HTMLBody += tabFoot;
//  Logger.log('HTML BODY: '+HTMLBody);
  return HTMLBody;
  //  MailApp.sendEmail({ to: 'athenaconsultingllc@gmail.com', cc: '', subject: '', htmlBody: HTMLBody });
}

function checkOutFile (report,option){
  //  DriveApp.getFolderById(id).getFiles().next().setName(name) setTrashed(trashed)
  var opt = option || GetParam('ProcessDups');
  var f=report.TargetFolder[0].getFilesByName(report.Title);
  if (f.hasNext()) {
    switch (opt){
      case 'update': //"New Hire Checklist":
        report.Title = report.Title  + Utilities.formatDate(new Date(), 'America/New_York', "' (Update' MM-dd-yy':'HH:mm)");
//it's already false by default        report.skipFile = false;
        break;
      case 'skip':
        report.skipFile = true;
        break;
      case 'replace':
        f.next().setName('{{Replaced}}:'+report.Title).setTrashed(true);
//it's already false by default        report.skipFile = false;
        break;
    }
  }
  return report.skipFile;
}

function cleanUpJunk (){//ready
  var DumpsterID='0B2n7QuWDntYRZ2tpLWk2NERjUW8';//TimeSheets '0B2n7QuWDntYRY3d4RWdIdkZjLXc';//DBox 0B2n7QuWDntYRZ2tpLWk2NERjUW8
  var Recycler = '0B2n7QuWDntYRbmFIc0FINW1hakU';
  //  var query = '"0B2n7QuWDntYRY3d4RWdIdkZjLXc" in parents and trashed = false and not mimeType = "application/vnd.google-apps.folder" and title contains "{{" and not title contains "{{DBPending}}:"';
  var DN=14;//days back to clean up Drive; put -1 to clean files modified today (after last midnight); put 0 to clean files at coming midnight
  var DyX = GetBackDate(DN,"yyyy-MM-dd'T04:00:00'");
  //   var query = jet('("%s" in parents or "%s" in parents) and trashed = false and modifiedDate <= "%s" and (title contains "OK" or title contains "Processed")',[DumpsterID,Recycler,GetBackDate(DN,"yyyy-MM-dd'T04:00:00'")]);//createdDate is not allowed
  var query = jet('trashed = false and modifiedDate <= "%s" and ("%s" in parents and (title contains "OK" or title contains "Processed" or title contains "Bad File")) or "%s" in parents',[GetBackDate(DN,"yyyy-MM-dd'T04:00:00'"),DumpsterID,Recycler]);//createdDate is not allowed
  var files = Drive.Files.list({maxResults: 100,q: query}); 
  if (files.items.length==0)  return;
  //clean up:
  for (var i = 0; i < files.items.length; i++) {
 //   Logger.log('Deleted: '+files.items[i].title)
    Drive.Files.trash(files.items[i].id); //Logger.log(files.items[i].title); 
  }
}


function compare (){
var Timer=[0, Number(new Date())];
var Timer1=[0, Number(new Date())];
for (var i=0; i<10; i++) renamefile();
var avrg1 = timeOut(Timer1)/10;
var Timer2=[0, Number(new Date())];
for (var i=0; i<10; i++) renameFile();
var avrg2 = timeOut(Timer2)/10;
var Total = timeOut(Timer);
Logger.log('Average for DriveApp: '+avrg1)
Logger.log('Average for DriveFiles: '+avrg2)
Logger.log('Total: '+Total)
}


function renamefile (fileId, newTitle){
  fileId='0B2n7QuWDntYRcWRkV2U1a285NzA';
  newTitle = 'POOSH';
DriveApp.getFileById(fileId).setName(newTitle)
}

function renameFile(fileId, newTitle) { //~0.2" faster than DriveApp.getFileById(id).setName(name)
  //works. Execution time 0.7-.8" passing comma-separated parents list in args would improve timing
  //"request' contains ALL FILE METADATA (including urls)
  fileId='0B2n7QuWDntYRcWRkV2U1a285NzA';
  newTitle = 'POOSH';
  var request = Drive.Files.patch({'title': newTitle},fileId);
  }

function moveFile(fileId, newTitle,targetFolderId,currentParentsList) { 
  //works. Execution time 0.7-.8" passing comma-separated parents list in args would improve timing
  //"request' contains ALL FILE METADATA (including urls)
  fileId='0B2n7QuWDntYRcWRkV2U1a285NzA';
  currentParentsList = '0B2n7QuWDntYRY3d4RWdIdkZjLXc';//DBox
  targetFolderId = '0B2n7QuWDntYROEdJcmlsdnNSRFU';//DBox/BackUps
  newTitle = 'POOSH';
  var parents = (currentParentsList || Drive.Files.get(fileId).parents)
  if (Array.isArray(parents)) for (var p in parents) currentParentsList = (currentParentsList)?','+parents[p].id:parents[p].id;
  var request = Drive.Files.patch({'title': newTitle},fileId,{'removeParents':currentParentsList,'addParents':targetFolderId})
  }

function init(){//not in use
  setups = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getDataRange().getValues();
  for (var i=0; i<setups.length; i++) prm.push(setups[i][0]);
}

function jet (where,what,mrk) {var M = mrk || '%s';for (var j in what) where=where.replace(M,what[j]); M=new RegExp(M,"g");where=where.replace(M,'');return where;}
/*uses elements of array what[] to replace %s or mrk. If N of mrk's > what.length the extra mrk's are deleted. If what.length > N(mrk) extra what[] are ignored
https://stackoverflow.com/questions/494035/how-do-you-use-a-variable-in-a-regular-expression
TESTING: where = 'qwerty %s bash %s et al. %s %s';
         what = ['postQuerty', 'after bash', '1997'];*/

function GetFolderByName(ParentFolder,ChildFolderName) {
if (!ChildFolderName) return [ParentFolder,ParentFolder.getId()];
  var folder,fi = ParentFolder.getFoldersByName(ChildFolderName);
  (fi.hasNext()) ? folder = fi.next() : folder = ParentFolder.createFolder(ChildFolderName);
  return [folder,folder.getId()];
}
 function updateSetups () {SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getDataRange().setValues(setups)} //update setup page

function GetBackDate (N,Format){//format should be "yyyy-MM-dd['optionalString'][HH:MM:SS:sss]"
//  var N=30;//days back
var format = (Format || "yyyy-MM-dd'T04:00:00'");
  var DyX = Date.now() - 86400000 * Number(N);
//  var x = new Date(DyX).toLocaleFormat("yyyy-MM-dd'T04:00:00'");//(1.4989824E12);
  return Utilities.formatDate(new Date(DyX), 'America/New_York', format);
//  return Utilities.formatDate(new Date(DyX), 'America/New_York', "yyyy-MM-dd'T04:00:00'");
}

function GetParam (param){
  if (!setups.length) {
    setups = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getDataRange().getValues();
    for (var i=0; i<setups.length; i++) prm.push(setups[i][0]);
  }
  return setups[prm.indexOf(param)][1]
}


function timeOut(timer){
timer[0] += (new Date() - timer[1])*0.001;timer[1]=Number(new Date());
return timer[0].toFixed(2);
}

function UpdateFile (fileid,fname,folderID) {//run time 05-06"
//  fileid='0B2n7QuWDntYRcWRkV2U1a285NzA';
// folderID = '0B2n7QuWDntYROEdJcmlsdnNSRFU';
//  fname = 'POOSH';
  var payloadData = {
    title: fname,
    parents: [{ id: folderID }]
  };
  var updateParams = {
    method: 'put',
    headers: { 'Authorization': 'Bearer ' + ScriptApp.getOAuthToken() },
    contentType: 'application/json',
    payload: JSON.stringify(payloadData)
  };
  //            POST https://www.googleapis.com/drive/v2/files
  UrlFetchApp.fetch('https://www.googleapis.com/drive/v2/files/' + fileid, updateParams);
}

function UploadConverted (attachmentBlob) {
  var uploadParams = {
    method: 'post',
    contentType: 'application/vnd.ms-excel', // works for both .xls and .xlsx files
    contentLength: attachmentBlob.getBytes().length,
    headers: { 'Authorization': 'Bearer ' + ScriptApp.getOAuthToken() },
    payload: attachmentBlob.getBytes(),
//    title: 'Cucaracha' does not work
  }
  var uploadResponse = UrlFetchApp.fetch('https://www.googleapis.com/upload/drive/v2/files/?uploadType=media&convert=true', uploadParams); // Upload file to Drive root folder and convert to Sheets
  var fileDataResponse = JSON.parse(uploadResponse.getContentText()); // Parse upload&convert response data (need this to be able to get id of converted sheet)
  return fileDataResponse;
  
}


function sortSheets(SNames,SpreadSheet){ //not in use
  if (SNames.length==0 || SNames=='' ){
    var SNames = []; var sheets = SpreadSheet.getSheets();
    for (var i = 0; i < sheets.length; i++) SNames.push(sheets[i].getName());
  }
  SNames.sort();
  for (var j = 0; j < SNames.length; j++) var as = SpreadSheet.getSheetByName(SNames[j]);SpreadSheet.setActiveSheet(as);SpreadSheet.moveActiveSheet(j + 1);
}


function formatTimePeriod (TimePeriod){
//TimePeriod = '5/1/2017 - 2/15/2017 - 1/1/18';
  var tmp = TimePeriod.split('-');
  var dates = []
  for (var i = 0; i < tmp.length; i++) dates.push(tmp[i].split('/'));
  for (var j = 0; j < dates.length; j++) {
    for (var i = 0; i < dates[j].length; i++) {
      if (dates[j][i] < 10) dates[j][i] = '0' + Number(dates[j][i]);
      if (dates[j][i] > 2000) dates[j][i] = Number(dates[j][i]) - 2000;
    }
  }
  TimePeriod = dates[0].join('-');
  for (var j = 1; j < dates.length; j++) TimePeriod = TimePeriod + ' to ' + dates[j].join('-');
  return TimePeriod;
}

function GetFolderIdByName(ParentFolder,ChildFolderName) {
  var folder;
  var fi = ParentFolder.getFoldersByName(ChildFolderName);
  (fi.hasNext()) ? folder = fi.next() : folder = ParentFolder.createFolder(ChildFolderName);
  return folder.getId();
}

 function testnewfilename (){//better use regex for terminal .xls
 var file = 'blabla.xlsx'
 var m = file.toLowerCase().search(/\.xlsx{0,1}$/)
 var name = isxls(file);
 var s=1
 }

function IsXLS(filename){return (filename.toLowerCase().search(/\.xlsx{0,1}$/)<0) ? false : true}//WORKS!


function testisXLS(filename){return (filename.toLowerCase().indexOf('.xls')<0) ? false : true}
function testIsXls (file) {return  (file.split('.')[file.split('.').length-1].toLowerCase().indexOf('xls')<0)?false:true}

function oldIsXLS(fileName) {
  //  var fileName = attachment.getName();
  var temp = fileName.split('.');
  var fileExtension = temp[temp.length - 1].toLowerCase();
  if (fileExtension=='xls'||fileExtension=='xlsx') return true;
  else return false;
}


function getRandomInt(min, max) {
  /*returns a random integer between the specified values. The value is no lower than min (or the next integer greater than min if min isn't an integer), and is less than (but not equal to) max.*/
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}
//returns unique values of linear array
function getUnique(array){return array.reduce(function(prev, cur) {return (prev.indexOf(cur) < 0) ? prev.concat([cur]) : prev;}, []);}
//retrurns numeric sum of the linear array elements
function GetSum(array){return array.reduce(function (total, cur) {return total + cur})};

function sortByCol(arr, colIndex){
  arr.sort(sortFunction)
  function sortFunction(a, b) {
    a = a[colIndex]
    b = b[colIndex]
    return (a === b) ? 0 : (a < b) ? -1 : 1//ascending
    //       return (a === b) ? 0 : (a < b) ? 1 : -1//descending
  }
}

function SortByCol(arr, colIndex,ascdesc){//>0 or null => ascending, -1,d,D => descending
  (ascdesc=='d'||ascdesc=='D'||ascdesc<0) 
  ? arr.sort( function(a, b,ascdesc) {a = a[colIndex];b = b[colIndex]; return (a === b) ? 0 : (a < b) ? 1 : -1}) 
  : arr.sort( function(a, b,ascdesc) {a = a[colIndex];b = b[colIndex]; return (a === b) ? 0 : (a < b) ? -1 : 1})
}


function testSorting(){
  var a = [['FFF', 'AAA'], ['AAA', 'BBB'], [28, 'CCC'],[18, 'DDD']]
  sortByCol(a, 0)
  Logger.log(a);
  var a = [['FFF', 'AAA'], ['AAA', 'BBB'], [28, 'CCC'],[18, 'DDD']]
  SortByCol(a, 0,-10)
  Logger.log(a);
  // "[[12,"AAA"],[18,"DDD"],[28,"CCC"],[58,"BBB"]]"
}

function GetIndex(what,where,how){//used in NewHireChecklist. Upgrade needed
  if(what == "") return false; 
  if(how=='') how=0;
//  var l=where.length;
  for (var r=0; r<where.length; r++)
//  l=where[r];
    if (where[r] == what) return r+how;
  return -1   
}
