function CheckReportFilesAPI_4() {
  //  var ft = [MimeType.GOOGLE_DOCS,MimeType.MICROSOFT_EXCEL,MimeType.MICROSOFT_EXCEL_LEGACY];
  var Timer=[0, Number(new Date())];
  Production
  var DumpsterID = '0B2n7QuWDntYRZ2tpLWk2NERjUW8';//TimeSheets ID
  var DumpsterName = 'TimeSheets';
  
 /* 
  //tetsing:
//  var DumpsterName = GetParam("DumpsterFolderName");
  var DumpsterID = GetParam("DumpsterFolder_ID");
 */ 
  
  var ftype = {//Excel:' mimeType contains "application/wps-office.xls" ',
    Excel:' (mimeType contains "application/wps-office.xls" or mimeType = "application/vnd.ms-excel") ',
    AnySheets: ' (mimeType contains "application/wps-office.xls" or mimeType = "application/vnd.ms-excel" or mimeType = "application/vnd.google-apps.spreadsheet") ',
    GSheet:' mimeType = "application/vnd.google-apps.spreadsheet" ',
    GDoc: ' mimeType = "application/vnd.google-apps.document" ',
    Gfolder:' mimeType = "application/vnd.google-apps.folder" ',
    PDF: ' mimeType = "application/pdf" '
  };
  //main loop
  var TimeOut = 300; //time (sec) when process should go to completion to avoid trigger over time limit exception
  var Reports = [];
  var Excel, Rs;
  var KW = {DB:['SZ-Active_Employees_List',[]],DBPending:['{{DBPending}}:',[]],Reports:['Time Card Alternative',[]]};//setting to lateral improves scanning performance by ommitting GetParam call that requires getting data from setup sheet
  var query = jet('"%s" in parents and trashed = false and %s and (title contains "%s" or title contains "%s" or title contains "%s")',[DumpsterID,ftype.AnySheets,KW.DB[0],KW.DBPending[0],KW.Reports[0]]);
  var files = Drive.Files.list({maxResults: 100,q: query}); 
  if (files.items.length==0)  return;
  for (var i = 0; i < files.items.length; i++) {
    for (var k in KW) if (files.items[i].title.indexOf(KW[k][0]) >=0) KW[k][1].push(files.items[i]);
  }
  if (KW.DB[1].length >1) return;//process error "More than 1 DB file to update" or select the oldest and process
  if (KW.DB[1].length ==1) {
    Excel = checkupExcel(KW.DB[1][0].mimeType,KW.DB[1][0].id,Timer); 
    if (Excel[0]) {updateDB(Excel[1],KW.DB[1][0].title); Excel[2].setName('{{Processed}}'+KW.DB[1][0].title)} 
    else {updateDB(KW.DB[1][0].id,KW.DB[1][0].title)} 
    return
  }
  if (KW.DBPending[1].length >0)  Reports.push(GetReports(KW.DBPending[1],Timer,TimeOut));
  if (KW.Reports[1].length >0)  Reports.push(GetReports(KW.Reports[1],Timer,TimeOut));
  if(Reports.length>0) finalize(Reports,Timer);
  Logger.log('DONE at: '+timeOut(Timer));//,file.mimeType, file.id);
}

function GetReports (files,Timer,TimeOut){
  //alternative : DriveApp.getFoldersByName(name).next() .searchFiles(query); .searchFolders(query),  (for example "title contains 'Gulliver\\'s Travels'" or 'title contains "Gulliver\'s Travels"').
  if (files.length > 0) {
    Logger.log('%s files found on %s',files.length, timeOut(Timer));
    var Rs = initReports(); if (Rs.fatalError) return Rs;//(Rs.log);
    Logger.log('Init report done, fatalError: %s, timer: %s',Rs.fatalError, timeOut(Timer));
    for (var i = 0; i < files.length; i++) {
      if (timeOut(Timer)>TimeOut) {Logger.log('Time Out @ filing loop: '+timeOut(Timer)); break}
      var fileid = files[i].id, xlsFile = files[i].title, FILE;  // not good as has no getBlob Drive.Files.get(fileid);
      var isExcel = checkupExcel(files[i].mimeType,fileid,Timer);
      if (isExcel[0]) {FILE=isExcel[2];fileid=isExcel[1];}
      var resp = processReport_4(fileid,Rs,xlsFile);//[{{OK}}:,{{DBPending}}:,{{BadFile}}:{{Duplicate}}, {{DB-Pending}}]
      if (FILE && resp.indexOf(Rs.DBPending)<=0) FILE.setName(xlsFile=resp+xlsFile);
      if (FILE && resp=='{{BadFile}}:') FILE.setTrashed(true);//Drive.Files.trash(fileid);// or DriveApp.getFileById(fileid).setTrashed(true); //this removes converted file (untitled in root)
      Logger.log('Ended up with %s, %s: ',xlsFile, timeOut(Timer));//,file.mimeType, file.id);
    } 
  }   return Rs;
}

function finalize(Reports,Timer){
  //Rs.log.push('WARNING: iSolved DB needs update! Current DB is "' + Rs.DBName ); 
  var ErrNum=0, Errors ='';
  var HTMLBody = '<p><strong>Job report</strong></p>';
  if (Reports.length==0) return; 
  Logger.log('number of records in Reports[]: '+Reports.length);
  for  (var r in Reports){
    Logger.log('Processing Report #'+r);
    var Rs = Reports[r];
    Logger.log('Number of reports in Rs: %s',Rs.reports.length);
    for (var er in Rs.log) if (Rs.log[er].indexOf('WARNING')>=0) ErrNum++;
    HTMLBody += Rs.pdfLinks.join('<br>');
    HTMLBody += '<p>Processing log:<br>'+Rs.log.join('<br>')
  } 
  //final point
  (ErrNum > 1) ? Errors = ' with ' + Number(ErrNum) + ' warnings.': (ErrNum == 1) ? Errors = ' with ' + Number(ErrNum) + ' warning.': Errors='';
  //  var subj = 'Processing of TimeCards submitted on ' + MsgDate.toString().split(' G')[0] + ' has been completed' + Errors;
  var subj = 'Processing of TimeCard Reports has been completed' + Errors;
  HTMLBody += '<p>Total processing time '+timeOut(Timer)+'</p><p>Regards,<br />ATHENA Timecard Processor '+GetParam('Version')+'</p><p>&nbsp;</p>';
  Logger.log(subj);
  Logger.log(HTMLBody);
  Logger.log('Total time '+timeOut(Timer));
  MailApp.sendEmail({ to: GetParam('SendNotificationTo'), cc: '', subject: subj, htmlBody: HTMLBody });
  return Rs.log;
}

function checkupExcel (ItemMimeType,fileid,Timer){
  if (ItemMimeType.indexOf('application/wps-office.xls')>=0 || ItemMimeType.indexOf('application/vnd.ms-excel')>=0) {
    Logger.log('xls file found, startung conversion, timer: %s',timeOut(Timer));
    var FILE = DriveApp.getFileById(fileid);
    fileid = UploadConverted(FILE.getBlob()).id;
    return [true,fileid,FILE]
  }
  return false
}
